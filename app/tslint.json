{
	"defaultSeverity": "warning",
	"rules": {
		// TypeScript-specific
		// Enforces function overloads to be consecutive.
		"adjacent-overload-signatures": true,

		// Bans specific types from being used. Does not ban the corresponding runtime objects from being used.
		"ban-types": false,

		// Requires explicit visibility declarations for class members.
		"member-access": [true, "no-public"],

		// Enforces member ordering.
		"member-ordering": false,

		// Disallows usages of any as a type declaration.
		"no-any": false,

		// Forbids empty interfaces.
		"no-empty-interface": true,

		// Avoid import statements with side-effect.
		"no-import-side-effect": false,

		// Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean.
		"no-inferrable-types": false,

		// Disallows internal module
		"no-internal-module": true,

		// Disallows the use constant number values outside of variable assignments. When no list of allowed values is specified, -1, 0 and 1 are allowed by default.
		"no-magic-numbers": [true, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.75, -3.5, -3.25, -3, -2.75, -2.5, -2.25, -2, -1.9375, -1.875, -1.8125, -1.75, -1.6875, -1.625, -1.5625, -1.5, -1.4375, -1.375, -1.3125, -1.25, -1.1875, -1.125, -1.0625, -1, -0.9375, -0.875, -0.8125, -0.75, -0.6875, -0.625, -0.5625, -0.5, -0.4375, -0.375, -0.3125, -0.25, -0.1875, -0.125, -0.0625, 0, 0.05, 0.0625, 0.1, 0.125, 0.1875, 0.25, 0.3125, 0.375, 0.4375, 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 0.9, 0.9375, 0.95, 1, 1.0625, 1.125, 1.1875, 1.25, 1.3125, 1.375, 1.4375, 1.5, 1.5625, 1.625, 1.6875, 1.75, 1.8125, 1.875, 1.9375, 2, 2.25, 2.5, 2.75, 3, 3.25, 3.5, 3.75, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 255],

		// Disallows use of internal modules and namespaces.
		"no-namespace": true,

		// Disallows non-null assertions.
		"no-non-null-assertion": true,

		// Disallows /// <reference path=> imports (use ES6-style imports instead).
		"no-reference": true,

		// Disallows the use of require statements except in import statements.
		"no-var-requires": true,

		// Disallows traditional (non-arrow) function expressions.
		"only-arrow-functions": [true, "allow-declarations"],

		// Recommends a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated.
		"prefer-for-of": false,

		// Requires any function or method that returns a promise to be marked async.
		"promise-function-async": true,

		// Requires type definitions to exist.
		"typedef": false,

		// Requires or disallows whitespace for type definitions.
		"typedef-whitespace": [true, {
			"call-signature": "nospace",
			"index-signature": "nospace",
			"parameter": "nospace",
			"property-declaration": "nospace",
			"variable-declaration": "nospace"
		}],

		// Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter.
		"unified-signatures": true,

		// Functionality
		// Warns for an awaited value that is not a Promise.
		"await-promise": true,

		// Bans the use of specific functions or global methods.
		"ban": false,

		// Enforces braces for if/for/do/while statements.
		"curly": true,

		// Requires a for ... in statement to be filtered with an if statement.
		"forin": false,

		// Disallows importing the specified modules directly via import and require. Instead only sub modules may be imported from that module.
		"import-blacklist": false,

		// Only allows labels in sensible locations.
		"label-position": false,

		// Disallows use of arguments.callee.
		"no-arg": true,

		// Disallows bitwise operators.
		"no-bitwise": true,

		// Disallows any type of assignment in conditionals.
		"no-conditional-assignment": true,

		// Bans the use of specified console methods.
		"no-console": true,

		// Disallows access to the constructors of String, Number, and Boolean.
		"no-construct": true,

		// Disallows debugger statements.
		"no-debugger": true,

		// Warns if ‘super()’ appears twice in a constructor.
		"no-duplicate-super": true,

		// Disallows duplicate variable declarations in the same block scope.
		"no-duplicate-variable": true,

		// Disallows empty blocks.
		"no-empty": true,

		// Disallows eval function invocations.
		"no-eval": true,

		// Promises returned by functions must be handled appropriately.
		"no-floating-promises": true,

		// Disallows iterating over an array with a for-in loop.
		"no-for-in-array": true,

		// Disallow type inference of {} (empty object type) at function and constructor call sites
		"no-inferred-empty-object-type": true,

		// Warns on use of ${ in non-template strings.
		"no-invalid-template-strings": true,

		// Disallows using the this keyword outside of classes.
		"no-invalid-this": true,

		// Warns on apparent attempts to define constructors for interfaces or new for classes.
		"no-misused-new": true,

		// Disallows use of the null keyword literal.
		"no-null-keyword": false,

		// Disallows shadowing variable declarations.
		"no-shadowed-variable": true,

		// Forbids array literals to contain missing elements.
		"no-sparse-arrays": true,

		// Disallows object access via string literals.
		"no-string-literal": true,

		// Flags throwing plain strings or concatenations of strings because only Errors produce proper stack traces.
		"no-string-throw": true,

		// Disallows falling through case statements.
		"no-switch-case-fall-through": true,

		// Warns when a method is used as outside of a method call.
		"no-unbound-method": true,

		// Warns when using an expression of type ‘any’ in a dynamic way. Uses are only allowed if they would work for {} | null | undefined. Type casts and tests are allowed. Expressions that work on all values (such as "" + x) are allowed.
		"no-unsafe-any": true,

		// Disallows control flow statements, such as return, continue, break and throws in finally blocks.
		"no-unsafe-finally": true,

		// Disallows unused expression statements.
		"no-unused-expression": [true, "allow-new"],

		// Disallows unused imports, variables, functions and private class members. Similar to tsc’s –noUnusedParameters and –noUnusedLocals options, but does not interrupt code compilation.
		"no-unused-variable": true,

		// Disallows usage of variables before their declaration.
		"no-use-before-declare": {"severity": "error"},

		// Disallows usage of the var keyword.
		"no-var-keyword": {"severity": "error"},

		// Requires expressions of type void to appear in statement position.
		"no-void-expression": true,

		// Requires the radix parameter to be specified when calling parseInt.
		"radix": true,

		// When adding two variables, operands must both be of type number or of type string.
		"restrict-plus-operands": true,

		// Restricts the types allowed in boolean expressions. By default only booleans are allowed. The following nodes are checked: Arguments to the !, &&, and || operators; The condition in a conditional expression (cond ? x : y); Conditions for if, for, while, and do-while statements.
		"strict-boolean-expressions": [true, "allow-null-union", "allow-undefined-union"],

		// Warns for type predicates that are always true or always false. Works for ‘typeof’ comparisons to constants (e.g. ‘typeof foo === “string”’), and equality comparison to ‘null’/’undefined’. (TypeScript won’t let you compare ‘1 === 2’, but it has an exception for ‘1 === undefined’.) Does not yet work for ‘instanceof’. Does not warn for ‘if (x.y)’ where ‘x.y’ is always truthy. For that, see strict-boolean-expressions.
		"strict-type-predicates": true,

		// Require a default case in all switch statements.
		"switch-default": true,

		// Requires === and !== in place of == and !=.
		"triple-equals": true,

		// Makes sure result of typeof is compared to correct string values
		"typeof-compare": {"severity": "error"},

		// Enforces use of the isNaN() function to check for NaN references instead of a comparison to the NaN constant.
		"use-isnan": true,

		// Maintainability
		// Enforces a threshold of cyclomatic complexity.
		"cyclomatic-complexity": [true, 20],

		// Ensures the file ends with a newline.
		"eofline": true,

		// Enforces indentation with tabs or spaces.
		"indent": [true, "tabs"],

		// Enforces a consistent linebreak style.
		"linebreak-style": [true, "LF"],

		// A file may not contain more than the specified number of classes
		"max-classes-per-file": false,

		// Requires files to remain under a certain number of lines
		"max-file-line-count": false,

		// Requires lines to be under a certain max length.
		"max-line-length": false,

		// Disallows default exports in ES6-style modules.
		"no-default-export": false,

		// Disallows mergeable namespaces in the same file.
		"no-mergeable-namespace": true,

		// Disallows invocation of require().
		"no-require-imports": false,

		// Requires keys in object literals to be sorted alphabetically
		"object-literal-sort-keys": false,

		// Requires that variable declarations use const instead of let and var if possible.
		"prefer-const": false,

		// Requires or disallows trailing commas in array and object literals, destructuring assignments, function typings, named imports and exports and function parameters.
		"trailing-comma": false,

		// Style
		// Enforces vertical alignment.
		"align": false,

		// Requires using either ‘T[]’ or ‘Array' for arrays.
		"array-type": [true, "generic"],

		// Requires parentheses around the parameters of arrow function definitions.
		"arrow-parens": true,

		// Suggests to convert () => { return x; } to () => x.
		"arrow-return-shorthand": true,

		// An interface or literal type with just a call signature can be written as a function type.
		"callable-types": true,

		// Enforces PascalCased class and interface names.
		"class-name": true,

		// Enforces formatting rules for single-line comments.
		"comment-format": false,

		// Enforces documentation for important items be filled out.
		"completed-docs": false,

		// Enforces a certain header comment for all files, matched by a regular expression.
		"file-header": false,

		// Ensures proper spacing between import statement keywords
		"import-spacing": true,

		// Requires interface names to begin with a capital ‘I’
		"interface-name": false,

		// Prefer an interface declaration over a type literal (type T = { ... })
		"interface-over-type-literal": true,

		// Enforces basic format rules for JSDoc comments.
		"jsdoc-format": false,

		// Requires that a default import have the same name as the declaration it imports. Does nothing for anonymous default exports.
		"match-default-export-name": false,

		// Enforces blank line before return when not the only line in the block.
		"newline-before-return": true,

		// Requires parentheses when invoking a constructor via the new keyword.
		"new-parens": true,

		// Requires the use of as Type for type assertions instead of <Type>.
		"no-angle-bracket-type-assertion": true,

		// Warns on comparison to a boolean literal, as in x === true.
		"no-boolean-literal-compare": true,

		// Disallows one or more blank lines in a row.
		"no-consecutive-blank-lines": [true, 2],

		// Disallows parameter properties in class constructors.
		"no-parameter-properties": false,

		// Don’t if you import “foo” anyway.
		"no-reference-import": false,

		// Disallows trailing whitespace at the end of a line.
		"no-trailing-whitespace": true,

		// Replaces x => f(x) with just f. To catch more cases, enable only-arrow-functions and arrow-return-shorthand too.
		"no-unnecessary-callback-wrapper": true,

		// Forbids a ‘var’/’let’ statement or destructuring initializer to be initialized to ‘undefined’.
		"no-unnecessary-initializer": false,

		// Warns when a namespace qualifier (A.x) is unnecessary.
		"no-unnecessary-qualifier": true,

		// Enforces consistent object literal property quote style.
		"object-literal-key-quotes": [true, "as-needed"],

		// Enforces use of ES6 object literal shorthand when possible.
		"object-literal-shorthand": true,

		// Requires the specified tokens to be on the same line as the expression preceding them.
		"one-line": false,

		// Disallows multiple variable definitions in the same declaration statement.
		"one-variable-per-declaration": [true, "ignore-for-loop"],

		// Requires that import statements be alphabetized.
		"ordered-imports": false,

		// Warns for class methods that do not use ‘this’.
		"prefer-function-over-method": false,

		// Prefer foo(): void over foo: () => void in interfaces and types.
		"prefer-method-signature": false,

		// Prefer a template expression over string literal concatenation.
		"prefer-template": true,

		// Requires single or double quotes for string literals.
		"quotemark": [true, "single", "jsx-double"],

		// Prefer return; in void functions and return undefined; in value-returning functions.
		"return-undefined": false,

		// Enforces consistent semicolon usage at the end of every statement.
		"semicolon": [true, "always"],

		// Require or disallow a space before function parenthesis
		"space-before-function-paren": [true, {"anonymous": "always", "named": "never", "asyncArrow": "always", "method": "never", "constructor": "never"}],

		// Checks variable names for various errors.
		"variable-name": [false, "check-format", "ban-keywords", "allow-leading-underscore", "allow-trailing-underscore"],

		// Enforces whitespace style conventions.
		"whitespace": [true, "check-branch", "check-decl", "check-operator", "check-module", "check-separator", "check-type", "check-typecast", "check-preblock"]
	}
}
